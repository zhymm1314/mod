---
description: 
globs: 
alwaysApply: false
---
# 测试规范指南

## 概述
本指南定义了前端和后端测试的标准和最佳实践，确保代码质量和功能可靠性。

## 🎯 测试原则

### 测试金字塔
```
      /\
     /  \    端到端测试 (E2E)
    /____\   - 少量，关键用户流程
   /      \  
  /        \ 集成测试 (Integration)
 /          \ - 中等数量，模块间交互
/____________\
 单元测试 (Unit) - 大量，功能单元测试
```

### 核心原则
1. **快速反馈**: 测试应该能够快速执行并提供反馈
2. **可重复性**: 测试结果应该在任何环境下都一致
3. **独立性**: 测试之间不应该相互依赖
4. **可维护性**: 测试代码应该易于理解和维护
5. **覆盖率**: 关键业务逻辑必须有测试覆盖

## 🔧 后端测试规范 (Go + Gin)

### 单元测试
**规范**:
- 使用Go标准库的`testing`包 + `testify/assert`
- 测试函数以`Test`开头，文件以`_test.go`结尾
- 遵循AAA模式（Arrange-Act-Assert）

**示例**:
```go
func TestUserService_Register(t *testing.T) {
    // Arrange
    userService := NewUserService()
    userRequest := RegisterRequest{
        Name: "张三", Mobile: "13800138000", Password: "123456",
    }

    // Act
    result, err := userService.Register(userRequest)

    // Assert
    assert.NoError(t, err)
    assert.Equal(t, "张三", result.Name)
}
```

### 集成测试
**规范**:
- 使用`httptest`包创建测试服务器
- 测试完整的HTTP请求/响应流程
- 使用测试数据库（SQLite内存数据库）

**示例**:
```go
func TestAuthController_Login_Integration(t *testing.T) {
    gin.SetMode(gin.TestMode)
    router := setupTestRouter()

    loginData := map[string]string{"mobile": "13800138000", "password": "123456"}
    jsonData, _ := json.Marshal(loginData)

    req, _ := http.NewRequest("POST", "/api/auth/login", bytes.NewBuffer(jsonData))
    req.Header.Set("Content-Type", "application/json")

    w := httptest.NewRecorder()
    router.ServeHTTP(w, req)

    assert.Equal(t, http.StatusOK, w.Code)
}
```

### 数据库测试
**规范**:
- 使用事务回滚确保测试数据隔离
- 每个测试用例使用独立的数据库连接

**示例**:
```go
func TestUserModel_Create(t *testing.T) {
    tx := db.Begin()
    defer tx.Rollback()

    user := User{Name: "测试用户", Mobile: "13900139000"}
    err := tx.Create(&user).Error
    
    assert.NoError(t, err)
    assert.NotZero(t, user.ID)
}
```

## 🖥️ 前端测试规范 (Vue 3 + Vite)

### 单元测试
**工具**: Vitest + Vue Test Utils

**规范**:
- 测试组件的渲染输出和交互行为
- 测试组件的props和events
- 使用Mock模拟外部依赖

**示例**:
```javascript
import { mount } from '@vue/test-utils'
import { describe, it, expect } from 'vitest'
import UserProfile from '@/components/UserProfile.vue'

describe('UserProfile', () => {
  it('renders user information correctly', () => {
    const wrapper = mount(UserProfile, {
      props: { user: { id: 1, name: '张三', email: 'zhangsan@example.com' } }
    })

    expect(wrapper.text()).toContain('张三')
    expect(wrapper.text()).toContain('zhangsan@example.com')
  })

  it('emits update event when edit button is clicked', async () => {
    const wrapper = mount(UserProfile, {
      props: { user: { id: 1, name: '张三' } }
    })

    await wrapper.find('.edit-button').trigger('click')
    expect(wrapper.emitted('update')).toBeTruthy()
  })
})
```

### 集成测试
**规范**:
- 使用MSW (Mock Service Worker) 模拟API
- 测试完整的用户操作流程

**示例**:
```javascript
import { setupServer } from 'msw/node'
import { rest } from 'msw'

const server = setupServer(
  rest.post('/api/auth/login', (req, res, ctx) => {
    return res(ctx.json({ code: 200, data: { token: 'mock-jwt-token' } }))
  })
)

describe('LoginForm Integration', () => {
  it('successfully logs in user', async () => {
    const wrapper = mount(LoginForm)
    
    await wrapper.find('input[type="tel"]').setValue('13800138000')
    await wrapper.find('input[type="password"]').setValue('123456')
    await wrapper.find('form').trigger('submit')
    
    expect(wrapper.emitted('login-success')).toBeTruthy()
  })
})
```

### 端到端测试 (E2E)
**工具**: Playwright

**示例**:
```javascript
import { test, expect } from '@playwright/test'

test('user can login successfully', async ({ page }) => {
  await page.goto('/login')
  await page.fill('input[placeholder="手机号"]', '13800138000')
  await page.fill('input[placeholder="密码"]', '123456')
  await page.click('button[type="submit"]')
  
  await expect(page).toHaveURL('/dashboard')
  await expect(page.locator('.user-name')).toContainText('张三')
})
```

## 📊 测试覆盖率要求

- **关键业务逻辑**: 100%覆盖率
- **一般功能模块**: 80%以上覆盖率
- **工具函数**: 90%以上覆盖率
- **整体项目**: 75%以上覆盖率

**覆盖率检查**:
```bash
# 后端
go test -cover ./...
go test -coverprofile=coverage.out ./...

# 前端
npm run test:coverage
```

## 🔄 测试执行流程

### 本地开发
1. **编写代码前**: 先写测试用例（TDD）
2. **编写代码中**: 运行相关测试确保功能正确
3. **提交代码前**: 运行全量测试确保无回归

### CI/CD集成
1. **代码提交**: 自动触发测试执行
2. **测试失败**: 阻止代码合并
3. **测试通过**: 允许部署到测试环境

## 🚨 测试最佳实践

### 测试数据管理
- 使用测试专用的数据库和数据
- 每次测试后清理测试数据
- 使用工厂模式创建测试数据
- 避免测试间的数据依赖

### 测试性能优化
- 并行执行独立的测试
- 使用内存数据库加速测试
- 合理使用Mock减少外部依赖
- 定期清理过时的测试用例

### 常见测试场景
- **正常流程测试**: 验证功能的正确性
- **异常处理测试**: 验证错误处理逻辑
- **边界条件测试**: 验证极限情况的处理
- **安全测试**: 验证认证授权和数据安全

## 🚨 接口访问故障排查

### 常见问题汇总

#### 1. 服务端口配置不一致
**排查步骤**:
```bash
# 检查后端实际运行端口
lsof -i :8080

# 检查前端代理配置
cat frontend/vite.config.js | grep -A 10 proxy

# 验证配置一致性
curl -s "http://localhost:8080/api/ping"  # 后端直接访问
curl -s "http://localhost:5174/api/ping"  # 前端代理访问
```

#### 2. 进程管理和端口占用
**排查步骤**:
```bash
# 查找占用端口的进程
lsof -ti:5173
lsof -ti:8080

# 清理进程
kill -9 <PID>
```

### 标准测试流程

#### 服务启动验证
```bash
# 后端服务验证
curl -s "http://localhost:8080/api/ping" && echo " ✅ 后端正常" || echo " ❌ 后端异常"

# 前端代理验证（5秒超时）
curl -s --max-time 5 "http://localhost:5174/api/ping" && echo " ✅ 代理正常" || echo " ❌ 代理异常"

# API功能测试
curl -s --max-time 5 "http://localhost:5174/api/games" | jq '.error_code' && echo " ✅ API正常" || echo " ❌ API异常"
```

#### 故障恢复标准流程
```bash
# Step 1: 清理环境
pkill -f "npm run dev" || true
pkill -f "go run main.go" || true
sleep 2

# Step 2: 启动后端
go run main.go &
sleep 3

# Step 3: 验证后端
curl -s "http://localhost:8080/api/ping" || exit 1

# Step 4: 启动前端
cd frontend && npm run dev -- --port 5174 &
sleep 5

# Step 5: 验证前端代理
timeout 5 curl -s "http://localhost:5174/api/ping" || exit 1
```

### 超时测试规则

#### 前端代理超时检测
所有前端代理相关的测试都必须设置5秒超时：

```bash
# 跨平台兼容的超时测试
curl -s --connect-timeout 5 --max-time 5 "http://localhost:5174/api/ping" && echo "✅ 代理正常" || echo "❌ 代理异常"

# 跨平台超时检测函数
test_with_timeout() {
    local url=$1
    local service_name=$2
    
    if curl -s --connect-timeout 5 --max-time 5 "$url" > /dev/null 2>&1; then
        echo "✅ $service_name 正常"
        return 0
    else
        echo "❌ $service_name 超时失败"
        return 1
    fi
}
```

### 常见错误代码对照

| 错误现象 | 可能原因 | 解决方案 |
|---|---|---|
| `Connection refused` | 服务未启动或端口错误 | 检查服务状态和端口配置 |
| `ENOENT: package.json` | 工作目录错误 | 切换到正确目录 |
| `Port already in use` | 端口被占用 | 清理进程或使用其他端口 |
| `404 Not Found` | 路由配置错误 | 检查API路由和代理配置 |
| `代理超时` | 代理配置错误或后端无响应 | 检查代理target和后端状态 |

## 🔄 前端进程管理与冲突预防

### 进程冲突检查脚本
```bash
check_frontend_conflicts() {
    echo "=== 前端进程冲突检查 ==="
    
    local npm_processes=$(ps aux | grep -E "npm run dev" | grep -v grep | wc -l)
    local vite_processes=$(ps aux | grep -E "vite" | grep -v grep | wc -l)
    local port_status=$(lsof -i :5173 2>/dev/null | wc -l)
    
    if [ $npm_processes -gt 0 ] || [ $vite_processes -gt 0 ] || [ $port_status -gt 0 ]; then
        echo "❌ 检测到进程冲突，建议执行清理操作"
        return 1
    else
        echo "✅ 无进程冲突，可以安全启动"
        return 0
    fi
}
```

### 安全清理脚本
```bash
clean_frontend_processes() {
    echo "=== 执行前端进程清理 ==="
    
    # 温和终止进程
    pkill -TERM -f "npm run dev" 2>/dev/null || true
    pkill -TERM -f "vite" 2>/dev/null || true
    sleep 3
    
    # 强制清理残留进程
    pkill -KILL -f "npm run dev" 2>/dev/null || true
    pkill -KILL -f "vite" 2>/dev/null || true
    
    # 清理占用端口的进程
    local pids=$(lsof -ti :5173 2>/dev/null)
    if [ -n "$pids" ]; then
        kill -9 $pids 2>/dev/null || true
    fi
    
    echo "✅ 前端进程清理完成"
}
```

### 测试完成标准
只有当以下所有检查都通过时，才算测试完成：

- [ ] 后端服务响应正常: `curl http://localhost:8080/api/ping` 返回 "pong"
- [ ] 前端代理正常: `curl http://localhost:5174/api/ping` 返回 "pong"  
- [ ] API数据正常: `curl http://localhost:5174/api/games` 返回JSON数据
- [ ] 前端页面可访问: 浏览器打开 `http://localhost:5174` 显示正常
- [ ] 页面功能正常: 搜索、分类、详情等功能都能正常使用

## 📋 测试检查清单

### 单元测试检查
- [ ] 所有公开方法都有测试用例
- [ ] 测试用例覆盖正常和异常情况
- [ ] 测试数据独立，不依赖外部状态
- [ ] 使用断言验证预期结果

### 集成测试检查
- [ ] API接口测试覆盖所有端点
- [ ] 测试请求和响应的数据格式
- [ ] 验证认证和授权逻辑
- [ ] 测试数据库操作的正确性

### 端到端测试检查
- [ ] 覆盖主要的用户流程
- [ ] 测试不同浏览器的兼容性
- [ ] 验证页面交互和导航
- [ ] 测试错误处理和用户反馈

## 🛠️ 快速启动脚本

### 一键测试环境启动
```bash
#!/bin/bash
# 快速启动开发测试环境

echo "🚀 启动测试环境..."

# 清理旧进程
pkill -f "npm run dev" || true
pkill -f "go run main.go" || true
sleep 2

# 启动后端
echo "启动后端服务..."
go run main.go &
sleep 3

# 验证后端
if ! curl -s "http://localhost:8080/api/ping" | grep -q "pong"; then
    echo "❌ 后端启动失败"
    exit 1
fi

# 启动前端
echo "启动前端服务..."
cd frontend && npm run dev -- --port 5174 &
sleep 5

# 验证前端代理
if ! curl -s --max-time 5 "http://localhost:5174/api/ping" | grep -q "pong"; then
    echo "❌ 前端代理失败"
    exit 1
fi

echo "✅ 测试环境启动完成"
echo "前端: http://localhost:5174"
echo "后端: http://localhost:8080"
```

### 一键测试执行
```bash
#!/bin/bash
# 执行完整测试套件

echo "🧪 执行测试套件..."

# 后端测试
echo "执行后端测试..."
go test -v ./... || exit 1

# 前端测试
echo "执行前端测试..."
cd frontend && npm test || exit 1

# 集成测试
echo "执行集成测试..."
npm run test:e2e || exit 1

echo "✅ 所有测试通过"
```

通过遵循这些测试规范，可以确保代码质量和系统稳定性，减少生产环境的bug和故障。
