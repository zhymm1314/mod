---
description: 
globs: 
alwaysApply: false
---
# 前端开发指南 (Vue 3 + Vite)

基于 Vue 3 和 Vite 的现代前端项目开发规范和最佳实践。

## 🚀 核心技术栈

- **Vue 3.5.13**: Composition API组件开发
- **Vite 6.2.4**: 现代构建工具，热重载
- **Node.js 18+**: 运行环境
- **原生CSS**: 响应式设计，Grid/Flexbox布局

## ⚠️ 关键布局规则 - 必须遵守！

### 1. CSS Grid布局失效的根本原因

**最常见问题：父级容器的max-width限制导致Grid退化为纵向列表**

#### ❌ 错误配置
```css
.app-main {
  max-width: 1400px;  /* 罪魁祸首！ */
  margin: 0 auto;
}

.mod-grid {
  grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
  /* 1400px ÷ 380px ≈ 3.6列，视觉效果差 */
}
```

#### ✅ 正确解决方案
```css
.app-main {
  width: 100% !important;
  max-width: none !important;  /* 关键！ */
  margin: 0 !important;
  padding: 8px !important;
  box-sizing: border-box !important;
}

.container {
  width: 100% !important;
  max-width: none !important;  /* 关键！ */
  padding: 0 !important;
  margin: 0 !important;
}

.mod-grid {
  display: grid !important;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)) !important;
  gap: 20px !important;
}
```

### 2. 避免100vw导致的水平溢出

#### ❌ 错误：使用100vw
```css
body {
  width: 100vw;  /* 包含滚动条宽度，导致溢出 */
}
```

#### ✅ 正确：使用100%
```css
body {
  width: 100% !important;
  overflow-x: hidden !important;
}
```

### 3. 禁止破坏性的全局Grid布局

#### ❌ 危险的全局布局
```css
/* 这种代码会破坏Vue组件的正常文档流 */
@media (min-width: 1024px) {
  body {
    display: flex;
    place-items: center;  /* 会遮挡头部内容 */
  }

  #app {
    display: grid;
    grid-template-columns: 1fr 1fr;  /* 强制双列，破坏垂直布局 */
  }
}
```

**问题分析：**
- `body { display: flex; place-items: center; }` 让整个页面居中，遮挡头部
- `#app { display: grid; grid-template-columns: 1fr 1fr; }` 强制双列布局，破坏Vue组件的垂直结构（header + main）
- 与实际的Vue组件布局需求不符

#### ✅ 正确的响应式布局
```css
/* 只在超宽屏幕使用，且不破坏组件结构 */
@media (min-width: 3200px) {
  .main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
  }
}
```

## 🎨 响应式Grid布局最佳实践

### 标准Grid配置
```css
.item-grid {
  display: grid !important;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)) !important;
  gap: 20px !important;
  width: 100% !important;
}

/* 4K屏幕优化 */
@media (min-width: 2561px) {
  .item-grid {
    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr)) !important;
    gap: 32px !important;
  }
}

/* 2K屏幕 */
@media (min-width: 1921px) and (max-width: 2560px) {
  .item-grid {
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)) !important;
    gap: 28px !important;
  }
}

/* 平板 */
@media (max-width: 768px) {
  .item-grid {
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)) !important;
    gap: 12px !important;
  }
}

/* 手机 */
@media (max-width: 600px) {
  .item-grid {
    grid-template-columns: 1fr !important;
    gap: 10px !important;
  }
}
```

### 调试检查清单
1. **检查所有父级容器**: 从#app到.grid的每一层
2. **移除max-width限制**: 任何max-width都可能是罪魁祸首
3. **使用100%而非100vw**: 避免水平溢出
4. **添加调试边框**: `border: 3px solid red !important;`
5. **验证响应式**: 测试不同屏幕尺寸

## 📋 Vue 3 开发规范

### Composition API 标准模板
```vue
<template>
  <div class="component-name">
    <h2>{{ title }}</h2>
    <div v-for="item in items" :key="item.id" class="item">
      {{ item.name }}
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'

// 响应式数据
const title = ref('标题')
const items = ref([])
const loading = ref(false)

// 方法
const loadData = async () => {
  loading.value = true
  try {
    const response = await fetch('/api/data')
    items.value = await response.json()
  } catch (error) {
    console.error('加载失败:', error)
  } finally {
    loading.value = false
  }
}

// 生命周期
onMounted(() => {
  loadData()
})
</script>

<style scoped>
.component-name {
  padding: 1rem;
}

.item {
  padding: 0.5rem;
  border-bottom: 1px solid #eee;
}
</style>
```

## 🔧 开发工具

### 环境配置
```bash
# 安装依赖
npm install

# 启动开发服务器
npm run dev

# 构建生产版本
npm run build
```

### API代理配置
```javascript
// vite.config.js
export default {
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true
      }
    }
  }
}
```

## 🚨 常见错误避免

### 1. 容器宽度问题
- ❌ 使用固定max-width限制Grid布局
- ❌ 使用100vw导致水平溢出
- ❌ 忘记设置box-sizing: border-box

### 2. Grid布局问题
- ❌ minmax最小值设置过大
- ❌ 忘记添加响应式断点
- ❌ 在Grid项目上设置固定width

### 3. 全局样式冲突
- ❌ 破坏性的全局Grid布局
- ❌ body上的flex布局影响组件
- ❌ 过度使用!important

### 4. 组件开发问题
- ❌ 忘记使用scoped样式
- ❌ 直接修改props
- ❌ 内存泄漏（未清理事件监听器）

## 📚 性能优化

### 代码分割
```javascript
// 路由懒加载
const UserProfile = () => import('./components/UserProfile.vue')

// 条件渲染懒加载
import { defineAsyncComponent } from 'vue'
const AsyncComponent = defineAsyncComponent(() => import('./HeavyComponent.vue'))
```

### 图片优化
- 使用WebP格式
- 实现懒加载
- 压缩图片尺寸

## 🎯 总结

**核心原则：**
1. **容器宽度**: 移除max-width限制，使用100%而非100vw
2. **Grid布局**: 合理设置minmax值，添加响应式断点
3. **避免破坏性全局样式**: 不要在body/#app上使用会破坏文档流的布局
4. **组件化开发**: 使用Composition API，遵循Vue 3最佳实践
5. **性能优先**: 代码分割、图片优化、合理使用缓存

**记住：任何一层容器的max-width限制都会导致Grid布局失效！**
