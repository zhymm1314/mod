# 工程化文档管理指南

为工程师和 Cursor AI 提供清晰、可操作的项目文档体系。文档按开发维度组织，支持快速定位和持续开发。

## 📋 文档维度结构

### 🎯 需求设计维度 (docs/requirements/)

#### 核心文档
- **[产品需求文档](docs/requirements/product-requirements.md)** - PRD文档
  - 功能需求清单
  - 用户故事和验收标准
  - 业务流程图
  - 数据流设计

- **[技术需求文档](docs/requirements/technical-requirements.md)** - TRD文档
  - 架构决策记录 (ADR)
  - 性能和安全要求
  - 第三方集成需求
  - 兼容性要求

- **[API设计文档](docs/requirements/api-design.md)** - API规范
  - RESTful API设计
  - 请求/响应格式
  - 错误码定义
  - 接口版本管理

#### Cursor AI 使用
```bash
# 需求分析时引用
@docs/requirements/product-requirements.md 分析用户需求
@docs/requirements/api-design.md 设计API接口
```

### 🎨 前端维度 (docs/frontend/)

#### 开发文档
- **[Vue3开发规范](docs/frontend/vue-standards.md)** - Vue3最佳实践
  - Composition API规范
  - 组件设计模式
  - 状态管理 (Pinia)
  - 路由配置规范

- **[UI/UX设计系统](docs/frontend/design-system.md)** - 设计规范
  - 色彩和字体规范
  - 组件库使用指南
  - 响应式布局规范
  - 图标和图片规范

- **[构建和部署](docs/frontend/build-deploy.md)** - 前端工程化
  - Vite配置最佳实践
  - 环境变量管理
  - 代码分割和优化
  - 部署流程和CDN配置

#### 关键文件引用
- **入口**: [frontend/src/main.js](frontend/src/main.js)
- **根组件**: [frontend/src/App.vue](frontend/src/App.vue)
- **配置**: [frontend/vite.config.js](frontend/vite.config.js)
- **依赖**: [frontend/package.json](frontend/package.json)

#### Cursor AI 使用
```bash
# 前端开发时引用
@docs/frontend/vue-standards.md 编写Vue组件
@docs/frontend/design-system.md 应用UI规范
@frontend-guide.mdc 启用前端开发规则
```

### ⚙️ 后端维度 (docs/backend/)

#### 开发文档
- **[Go开发规范](docs/backend/go-standards.md)** - Go语言最佳实践
  - 代码结构和命名规范
  - 错误处理模式
  - 并发编程规范
  - 性能优化指南

- **[Gin框架指南](docs/backend/gin-framework.md)** - Web框架使用
  - MVC架构实现
  - 中间件开发规范
  - 路由设计模式
  - 请求验证和响应处理

- **[数据库设计](docs/backend/database-design.md)** - 数据层设计
  - 表结构设计规范
  - GORM使用最佳实践
  - 数据库迁移流程
  - 查询优化策略

- **[API接口实现](docs/backend/api-implementation.md)** - 接口开发
  - RESTful API实现
  - JWT认证和授权
  - 参数验证和错误处理
  - API文档生成

#### 关键文件引用
- **入口**: [backend/main.go](backend/main.go)
- **路由**: [backend/routes/api.go](backend/routes/api.go)
- **配置**: [backend/config.yaml](backend/config.yaml)
- **模块**: [backend/go.mod](backend/go.mod)

#### Cursor AI 使用
```bash
# 后端开发时引用
@docs/backend/gin-framework.md 实现API接口
@docs/backend/database-design.md 设计数据模型
@backend-guide.mdc 启用后端开发规则
```

### 🧪 测试维度 (docs/testing/)

#### 测试文档
- **[测试策略](docs/testing/test-strategy.md)** - 测试规划
  - 测试金字塔策略
  - 测试覆盖率要求
  - 测试环境配置
  - 持续集成测试

- **[前端测试](docs/testing/frontend-testing.md)** - Vue组件测试
  - Vitest + Vue Test Utils
  - 组件单元测试
  - E2E测试 (Playwright)
  - Mock和测试数据

- **[后端测试](docs/testing/backend-testing.md)** - Go服务测试
  - Go testing + testify
  - HTTP接口测试
  - 数据库测试
  - 集成测试策略

- **[性能测试](docs/testing/performance-testing.md)** - 性能基准
  - 压力测试方案
  - 性能监控指标
  - 瓶颈分析方法
  - 优化建议

#### Cursor AI 使用
```bash
# 测试开发时引用
@docs/testing/frontend-testing.md 编写Vue组件测试
@docs/testing/backend-testing.md 编写Go接口测试
@testing-guide.mdc 启用测试开发规则
```

## 🚀 快速导航

### 新工程师入门 (5分钟)
1. **[README.md](README.md)** - 项目概览
2. **[环境搭建](docs/requirements/technical-requirements.md)** - 开发环境
3. **[架构概览](docs/backend/gin-framework.md)** - 技术架构
4. **[开发规范](docs/frontend/vue-standards.md)** - 编码规范

### 按角色快速定位
- **产品经理**: `docs/requirements/` 目录
- **前端工程师**: `docs/frontend/` 目录 + `@frontend-guide.mdc`
- **后端工程师**: `docs/backend/` 目录 + `@backend-guide.mdc` 
- **测试工程师**: `docs/testing/` 目录 + `@testing-guide.mdc`
- **DevOps工程师**: [docker-compose.yml](docker-compose.yml) + [部署脚本](start.sh)

### Cursor AI 协作模式
```bash
# 需求分析阶段
[需求分析] @docs/requirements/product-requirements.md

# 开发阶段
[开发模式-前端] @docs/frontend/vue-standards.md
[开发模式-后端] @docs/backend/gin-framework.md

# 测试阶段
[测试模式] @docs/testing/test-strategy.md

# 调试阶段
[调试模式] 参考对应维度文档定位问题
```

## ⚡ 文档维护规范

### 更新触发条件
- **代码变更**: 同步更新相关技术文档
- **需求变更**: 更新产品和API设计文档
- **架构调整**: 更新架构决策记录 (ADR)
- **问题修复**: 更新故障排除和最佳实践

### 文档质量标准
- **可执行性**: 所有代码示例必须可直接运行
- **时效性**: 文档内容与代码实现保持同步
- **完整性**: 涵盖核心功能的完整使用场景
- **简洁性**: 突出关键信息，避免冗余描述

### Cursor AI 友好格式
- **文件引用**: 使用 `[文件名](文件路径)` 格式
- **代码块**: 包含语言标识和可运行示例
- **清单格式**: 使用编号列表和任务清单
- **关键词高亮**: 使用 **粗体** 标识重要概念

## 📁 目录映射表

| 维度 | 目录 | 主要内容 | Cursor规则 |
|------|------|----------|------------|
| 需求设计 | `docs/requirements/` | PRD、TRD、API设计 | `@communication-guide.mdc` |
| 前端开发 | `docs/frontend/` | Vue3、UI、构建部署 | `@frontend-guide.mdc` |
| 后端开发 | `docs/backend/` | Go、Gin、数据库 | `@backend-guide.mdc` |
| 测试开发 | `docs/testing/` | 单元、集成、E2E测试 | `@testing-guide.mdc` |

---

**设计理念**: 文档即代码，规范即工具，协作即效率 🚀
