---
description: 
globs: 
alwaysApply: false
---
# 项目文档管理指南

项目文档统一整理和管理，为开发者和用户提供清晰的项目导航和使用指引。

## 📚 文档目录结构

项目文档已统一整理到 `docs/` 目录下，按功能模块分类组织：

### 安装配置文档 (docs/setup/)
- **安装指南**: [docs/setup/installation-guide.md](mdc:docs/setup/installation-guide.md) - 详细的项目安装和启动指南
  - 快速启动步骤
  - 环境要求说明
  - 依赖服务配置
  - API接口说明
  - 常见问题和故障排除

### 架构说明文档 (docs/architecture/)
- **后端MVC架构指南**: [docs/architecture/backend-mvc-guide.md](mdc:docs/architecture/backend-mvc-guide.md) - 详细的后端架构说明
  - MVC分层设计
  - 中间件使用
  - 配置管理策略
  - 数据库设计
  - API设计规范
  
- **项目结构说明**: [docs/architecture/project-structure.md](mdc:docs/architecture/project-structure.md) - 完整的项目目录结构说明
  - 前后端代码组织
  - 文件和目录命名规范
  - 模块依赖关系
  - 配置文件说明

### 开发指南文档 (docs/development/)
- **编码规范**: [docs/development/coding-standards.md](mdc:docs/development/coding-standards.md) - Go后端和Vue前端的详细编码规范
  - 代码风格指南
  - 命名约定
  - 注释规范
  - 测试规范
  - Git提交规范
  
- **项目状态报告**: [docs/development/project-reports.md](mdc:docs/development/project-reports.md) - 项目当前状态信息
  - 已实现功能清单
  - 开发进度跟踪
  - 性能指标统计
  - 已知问题记录
  - 后续开发计划

### 部署文档 (docs/deployment/)
- **部署指南**: 生产环境部署说明
- **Docker配置**: 容器化部署配置
- **CI/CD流程**: 持续集成和部署流程
- **监控和日志**: 系统监控和日志管理

## 🚀 关键文件引用

### 项目根文件
- **项目说明**: [README.md](mdc:README.md) - 项目概览和快速入门
- **更新日志**: [CHANGELOG.md](mdc:CHANGELOG.md) - 版本更新记录
- **贡献指南**: [CONTRIBUTING.md](mdc:CONTRIBUTING.md) - 开发贡献规范

### 后端核心文件
- **项目入口**: [backend/main.go](mdc:backend/main.go) - 应用程序主入口
- **路由配置**: [backend/routes/api.go](mdc:backend/routes/api.go) - API路由定义
- **应用配置**: [backend/config.yaml](mdc:backend/config.yaml) - 应用配置文件
- **示例配置**: [backend/example-config.yaml](mdc:backend/example-config.yaml) - 配置文件模板

### 前端核心文件  
- **应用入口**: [frontend/src/main.js](mdc:frontend/src/main.js) - Vue应用入口
- **根组件**: [frontend/src/App.vue](mdc:frontend/src/App.vue) - 主应用组件
- **构建配置**: [frontend/vite.config.js](mdc:frontend/vite.config.js) - Vite构建配置
- **包管理**: [frontend/package.json](mdc:frontend/package.json) - 依赖和脚本配置

### 项目配置文件
- **Docker编排**: [docker-compose.yml](mdc:docker-compose.yml) - 容器化部署配置
- **启动脚本**: [start.sh](mdc:start.sh) - 项目启动脚本
- **停止脚本**: [stop.sh](mdc:stop.sh) - 项目停止脚本
- **环境变量**: [.env.example](mdc:.env.example) - 环境变量示例文件

## 📖 文档使用指南

### 新用户入门流程
1. **项目概览**: 首先阅读 [README.md](mdc:README.md) 了解项目基本信息
2. **环境搭建**: 按照 [安装指南](mdc:docs/setup/installation-guide.md) 搭建开发环境
3. **代码结构**: 查看 [项目结构说明](mdc:docs/architecture/project-structure.md) 了解代码组织
4. **开发规范**: 参考 [编码规范](mdc:docs/development/coding-standards.md) 开始开发
5. **架构理解**: 深入阅读相关架构文档了解技术细节

### 开发人员参考路径
- **后端开发者**: 
  1. [后端MVC架构指南](mdc:docs/architecture/backend-mvc-guide.md) - 了解后端架构设计
  2. [编码规范](mdc:docs/development/coding-standards.md) - 遵循Go开发标准
  3. [API文档](mdc:docs/api/api-reference.md) - API接口详细说明
  
- **前端开发者**:
  1. [前端开发指南](mdc:docs/development/frontend-guide.md) - Vue 3开发规范
  2. [组件库文档](mdc:docs/frontend/components.md) - 公共组件使用说明
  3. [样式指南](mdc:docs/frontend/style-guide.md) - CSS和UI规范

- **运维人员**:
  1. [部署指南](mdc:docs/deployment/deployment-guide.md) - 生产环境部署
  2. [监控配置](mdc:docs/deployment/monitoring.md) - 系统监控设置
  3. [故障排除](mdc:docs/deployment/troubleshooting.md) - 常见问题解决

### 项目管理参考
- **项目经理**: 查看 [项目状态报告](mdc:docs/development/project-reports.md) 了解开发进展
- **技术负责人**: 参考架构文档进行技术决策和代码审查
- **测试人员**: 根据API文档和功能规范编写测试用例

## 📝 文档维护规范

### 文档更新原则
1. **同步更新**: 代码变更时同步更新相关文档
2. **版本控制**: 重要文档变更记录在版本历史中
3. **格式统一**: 使用统一的Markdown格式和样式
4. **链接维护**: 定期检查文档间的链接有效性
5. **内容审核**: 定期审核文档内容的准确性和完整性

### 目录分类规则
- **setup/** - 安装配置相关文档
- **architecture/** - 架构设计相关文档  
- **development/** - 开发指南和规范
- **deployment/** - 部署和运维文档
- **api/** - API接口文档
- **frontend/** - 前端专用文档
- **backend/** - 后端专用文档

### 文档写作规范
1. **标题层级**: 使用清晰的标题层级结构
2. **代码示例**: 提供完整可运行的代码示例
3. **截图说明**: 适当使用截图辅助说明
4. **链接规范**: 使用相对路径引用项目内文件
5. **多语言支持**: 重要文档提供中英文版本

### 文档质量检查
- **内容完整性**: 确保文档涵盖所有必要信息
- **准确性验证**: 定期验证文档内容与代码实现的一致性
- **可读性**: 使用清晰的语言和逻辑结构
- **维护性**: 建立文档更新和维护流程
- **用户反馈**: 收集和处理用户对文档的反馈意见

## 🔄 文档协作流程

### 文档创建流程
1. **需求分析**: 确定文档需要解决的问题
2. **大纲设计**: 制定文档结构和内容大纲
3. **内容编写**: 按照规范编写文档内容
4. **内部审核**: 团队内部审核文档质量
5. **发布更新**: 合并到主分支并通知相关人员

### 文档更新流程
1. **变更识别**: 识别需要更新的文档内容
2. **影响评估**: 评估更新对其他文档的影响
3. **内容修订**: 修订文档内容和相关链接
4. **版本记录**: 在变更日志中记录重要更新
5. **通知分发**: 通知相关团队成员文档更新

### 协作工具和平台
- **版本控制**: 使用Git管理文档版本
- **在线协作**: 支持多人同时编辑和评论
- **自动化**: 使用CI/CD自动检查和部署文档
- **反馈收集**: 建立文档反馈和改进机制

这个文档管理指南确保项目文档的清晰组织和有效维护，为项目的长期发展提供良好的文档基础。
