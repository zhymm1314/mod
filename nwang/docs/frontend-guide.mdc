---
description:
globs:
alwaysApply: false
---
# 前端开发指南 (Vue 3 + Vite)

这是一个基于 Vue 3 和 Vite 的现代前端项目，使用 Composition API 进行组件开发。

## 🚀 核心文件

### 应用入口
- **主入口**: [frontend/src/main.js](mdc:frontend/src/main.js) - Vue应用初始化入口
- **根组件**: [frontend/src/App.vue](mdc:frontend/src/App.vue) - 应用主组件，包含所有业务逻辑

### 配置文件
- **Vite配置**: [frontend/vite.config.js](mdc:frontend/vite.config.js) - 构建工具配置，包含代理设置
- **包管理**: [frontend/package.json](mdc:frontend/package.json) - 项目依赖和脚本配置

## 💻 技术栈

### 核心框架
- **Vue 3.5.13**: 使用Composition API进行组件开发
- **Vite 6.2.4**: 现代前端构建工具，支持热重载
- **Node.js 18**: 运行环境要求
- **原生CSS**: 响应式设计，支持移动端适配

### 开发特性
- **API代理**: Vite开发服务器代理后端API请求
- **热重载**: 开发过程中自动刷新页面
- **模块化**: ES Modules支持现代JavaScript特性
- **TypeScript支持**: 可选的TypeScript类型检查

## 🎨 现代化设计系统

### 视觉风格原则
1. **简约美学**: 减少不必要的装饰，注重功能性设计
2. **毛玻璃效果**: 使用 `backdrop-filter: blur()` 创建现代层次感
3. **渐变色彩**: 主色调采用 `#667eea` 到 `#764ba2` 的渐变
4. **圆角设计**: 统一使用圆角设计增强亲和力
5. **微交互**: 丰富的 hover 和 transition 效果

### 色彩系统
```css
/* 主色调 */
--primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
--primary-color: #667eea;
--secondary-color: #764ba2;

/* 功能色彩 */
--success-gradient: linear-gradient(135deg, #28a745, #20c997);
--success-color: #28a745;
--danger-color: #dc3545;
--warning-color: #ffc107;
--info-color: #17a2b8;

/* 中性色彩 */
--white: #ffffff;
--light-gray: #f8f9fa;
--gray: #6c757d;
--dark-gray: #343a40;
--black: #000000;

/* 透明度变体 */
--white-10: rgba(255, 255, 255, 0.1);
--white-20: rgba(255, 255, 255, 0.2);
--white-90: rgba(255, 255, 255, 0.9);
--white-95: rgba(255, 255, 255, 0.95);
```

### 间距系统
```css
/* 标准间距单位 (基于 4px) */
--spacing-xs: 4px;
--spacing-sm: 8px;
--spacing-md: 12px;
--spacing-lg: 16px;
--spacing-xl: 20px;
--spacing-2xl: 24px;
--spacing-3xl: 32px;
--spacing-4xl: 40px;
--spacing-5xl: 48px;
```

### 圆角系统
```css
--radius-sm: 6px;
--radius-md: 8px;
--radius-lg: 12px;
--radius-xl: 16px;
--radius-pill: 25px;
--radius-circle: 50%;
```

### 阴影系统
```css
--shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.1);
--shadow-md: 0 4px 20px rgba(0, 0, 0, 0.1);
--shadow-lg: 0 8px 30px rgba(0, 0, 0, 0.15);
--shadow-xl: 0 20px 60px rgba(0, 0, 0, 0.3);

/* 功能性阴影 */
--shadow-button: 0 4px 15px rgba(102, 126, 234, 0.3);
--shadow-button-hover: 0 6px 20px rgba(102, 126, 234, 0.4);
--shadow-success: 0 4px 15px rgba(40, 167, 69, 0.3);
```

## 📱 响应式布局规范

### 断点系统
```css
/* 移动优先的响应式断点 */
--mobile: 320px;      /* 小屏手机 */
--mobile-lg: 480px;   /* 大屏手机 */
--tablet: 768px;      /* 平板 */
--desktop: 1024px;    /* 桌面 */
--desktop-lg: 1200px; /* 大屏桌面 */
--desktop-xl: 1400px; /* 超大屏 */
```

### 响应式设计原则
1. **移动优先**: 从小屏开始设计，逐步增强
2. **弹性布局**: 使用 `fr`、`%`、`vw/vh` 等相对单位
3. **内容优先**: 确保核心内容在所有设备上可访问
4. **触摸友好**: 按钮、链接等交互元素至少 44px×44px

### 网格系统
```css
/* 自适应网格布局 */
.grid-auto {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: var(--spacing-lg);
}

.grid-responsive {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: var(--spacing-lg);
}

/* 响应式网格示例 */
@media (max-width: 768px) {
  .grid-auto {
    grid-template-columns: 1fr;
    gap: var(--spacing-md);
  }
}
```

## 🧩 组件设计规范

### 卡片组件
```css
.card {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: var(--radius-lg);
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: var(--shadow-md);
  transition: all 0.3s ease;
}

.card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-lg);
}
```

### 按钮组件
```css
.btn {
  padding: var(--spacing-md) var(--spacing-xl);
  border: none;
  border-radius: var(--radius-pill);
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-sm);
}

.btn-primary {
  background: var(--primary-gradient);
  color: white;
  box-shadow: var(--shadow-button);
}

.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-button-hover);
}

.btn-success {
  background: var(--success-gradient);
  color: white;
  box-shadow: var(--shadow-success);
}
```

### 输入框组件
```css
.input {
  padding: var(--spacing-md) var(--spacing-lg);
  border: 2px solid rgba(102, 126, 234, 0.2);
  border-radius: var(--radius-pill);
  outline: none;
  transition: all 0.3s ease;
  background: rgba(255, 255, 255, 0.9);
}

.input:focus {
  border-color: var(--primary-color);
  background: white;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}
```

### 标签组件
```css
.tag {
  display: inline-block;
  padding: var(--spacing-xs) var(--spacing-md);
  border-radius: var(--radius-lg);
  font-size: 0.75rem;
  font-weight: 500;
}

.tag-primary {
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
}

.tag-outline {
  background: rgba(102, 126, 234, 0.1);
  color: var(--primary-color);
  border: 1px solid rgba(102, 126, 234, 0.2);
}
```

## 📁 项目结构

### 源码目录 (frontend/src/)
```
frontend/src/
├── App.vue          # 根组件 - 包含主要业务逻辑
├── main.js          # 应用入口 - Vue应用初始化
├── components/      # 公共组件目录
│   ├── ModSearch.vue    # 搜索组件
│   ├── ModList.vue      # 列表组件
│   └── ...              # 其他业务组件
├── assets/          # 静态资源目录
│   ├── images/      # 图片资源
│   ├── styles/      # 样式文件
│   └── fonts/       # 字体文件
├── utils/           # 工具函数
├── api/             # API接口封装
└── router/          # 路由配置（如果使用Vue Router）
```

### 构建输出
- **开发模式**: `npm run dev` - 启动开发服务器 (http://localhost:5173)
- **生产构建**: `npm run build` - 构建到 `dist/` 目录
- **预览模式**: `npm run preview` - 预览生产构建

## 🔌 API集成

### 代理配置
Vite配置文件中设置代理，将`/api/*`请求转发到后端服务：
```javascript
// vite.config.js
export default {
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8080',
        changeOrigin: true,
        secure: false
      }
    }
  }
}
```

### API调用规范
```javascript
// 统一的错误处理
const apiCall = async (url, options = {}) => {
  try {
    const response = await fetch(url, options)
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    const data = await response.json()
    
    // 根据后端响应格式处理
    if (data.error_code === 0) {
      return data.data
    } else {
      throw new Error(data.message || '请求失败')
    }
  } catch (error) {
    console.error('API调用失败:', error)
    throw error
  }
}

// 使用示例
const fetchMods = async (params) => {
  const queryParams = new URLSearchParams(params)
  return await apiCall(`/api/mods/search?${queryParams}`)
}
```

## 📋 开发规范

### Vue 3 Composition API 规范
```vue
<template>
  <div class="component-wrapper">
    <!-- 模板内容 -->
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'

// 1. 定义 props
const props = defineProps({
  title: {
    type: String,
    required: true
  },
  items: {
    type: Array,
    default: () => []
  }
})

// 2. 定义 emits
const emit = defineEmits(['update', 'delete'])

// 3. 响应式数据
const loading = ref(false)
const searchQuery = ref('')

// 4. 计算属性
const filteredItems = computed(() => {
  return props.items.filter(item => 
    item.name.toLowerCase().includes(searchQuery.value.toLowerCase())
  )
})

// 5. 方法
const handleUpdate = (item) => {
  emit('update', item)
}

// 6. 生命周期
onMounted(() => {
  // 组件挂载后的逻辑
})
</script>

<style scoped>
/* 组件样式 */
</style>
```

### CSS 编写规范
1. **使用 scoped 样式**避免样式冲突
2. **BEM 命名规范**：`.block__element--modifier`
3. **CSS 变量**：使用自定义属性管理主题
4. **移动优先**：默认写移动端样式，用媒体查询增强
5. **性能优化**：避免深层嵌套，合理使用选择器

### 样式架构示例
```css
/* 1. CSS 变量定义 */
:root {
  --component-bg: rgba(255, 255, 255, 0.95);
  --component-border: rgba(102, 126, 234, 0.2);
  --component-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

/* 2. 基础组件样式 */
.mod-card {
  background: var(--component-bg);
  backdrop-filter: blur(10px);
  border: 1px solid var(--component-border);
  border-radius: var(--radius-lg);
  box-shadow: var(--component-shadow);
  transition: all 0.3s ease;
}

/* 3. 状态变化 */
.mod-card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-lg);
}

/* 4. 响应式适配 */
@media (max-width: 768px) {
  .mod-card {
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-sm);
  }
}
```

### 文件命名规范
- **组件**: PascalCase (ModSearch.vue, UserProfile.vue)
- **页面**: PascalCase (HomePage.vue, AboutPage.vue)
- **工具文件**: camelCase (apiUtils.js, formatUtils.js)
- **常量文件**: SCREAMING_SNAKE_CASE (API_CONSTANTS.js)

## 🔧 开发工具

### 环境准备
1. **Node.js**: 安装Node.js 18或更高版本
2. **包管理器**: 推荐使用npm或yarn
3. **IDE**: 推荐使用VS Code + Vetur/Volar插件

### 安装和启动
```bash
# 安装依赖
cd frontend
npm install

# 启动开发服务器
npm run dev

# 构建生产版本
npm run build

# 预览生产构建
npm run preview
```

### 调试技巧
1. **浏览器DevTools**: F12打开开发者工具
2. **Vue DevTools**: 安装Vue DevTools浏览器扩展
3. **网络面板**: 查看API请求和响应
4. **响应式调试**: 使用设备模拟器测试不同屏幕尺寸
5. **性能分析**: 使用Lighthouse分析页面性能

## 🚀 性能优化

### 代码优化
1. **代码分割**: 使用动态import()实现懒加载
2. **Tree Shaking**: Vite自动进行无用代码剔除
3. **组件缓存**: 合理使用KeepAlive缓存组件
4. **防抖节流**: 对频繁触发的事件进行优化

### 资源优化
1. **图片优化**: 使用WebP格式，实现懒加载
2. **字体优化**: 使用系统字体栈，减少加载时间
3. **CSS优化**: 避免重复样式，合理使用CSS变量
4. **JavaScript优化**: 减少包体积，优化打包策略

### 用户体验优化
1. **加载状态**: 提供清晰的加载反馈
2. **错误处理**: 优雅的错误提示和降级方案
3. **动画流畅**: 使用CSS动画替代JavaScript动画
4. **交互反馈**: 丰富的hover、focus、active状态

## 📱 移动端适配最佳实践

### 触摸交互
```css
/* 确保触摸目标足够大 */
.touch-target {
  min-height: 44px;
  min-width: 44px;
  padding: var(--spacing-md);
}

/* 移除点击高亮 */
.btn {
  -webkit-tap-highlight-color: transparent;
  user-select: none;
}
```

### 视口配置
```html
<!-- 确保正确的视口设置 -->
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
```

### 布局适配
```css
/* 安全区域适配（iPhone X等） */
.container {
  padding-left: env(safe-area-inset-left);
  padding-right: env(safe-area-inset-right);
  padding-bottom: env(safe-area-inset-bottom);
}

/* 避免固定宽度，使用弹性布局 */
.grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: var(--spacing-md);
}
```

## 🔒 代码质量保证

### ESLint 配置
```javascript
// .eslintrc.js
module.exports = {
  extends: [
    '@vue/standard',
    'plugin:vue/vue3-recommended'
  ],
  rules: {
    'vue/component-name-in-template-casing': ['error', 'PascalCase'],
    'vue/no-unused-vars': 'error',
    'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off'
  }
}
```

### Git Hooks
```json
// package.json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{vue,js}": ["eslint --fix", "git add"],
    "*.{css,scss,vue}": ["stylelint --fix", "git add"]
  }
}
```

这个现代化的前端设计系统确保了项目的视觉一致性、用户体验优良性和代码可维护性，为后续开发提供了完整的指导规范。

